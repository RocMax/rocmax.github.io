{"pages":[{"url":"http://blog.game18.net/li-yong-pelicanhe-github-pagesda-zao-ge-xing-hua-bo-ke-yi.html","text":"1. 配置GitHbu Pages 在GitHub中新建一个repository,命名为username.github.io,其中username是github的用户名,我建的是rocmax.github.io. 进入后点击右边栏中的Settings,找到GitHub Pages栏,点击Launch automatic page generator按钮,然后点击Continue to layouts,选择一个主题样式,点击Publish page,一个崭新的GitHub Pages页面就出现了,你可以使用username.github.io访问这个新页面,是不是很酷? 网页虽然能访问了,但离想要的博客还很遥远.当然,直接去编辑html文件可以改变网页内容,我们显然不会采用这种笨办法.我们先把自动生成的文件都删除(不熟悉Git命令的话可以在网页上挨个删掉然后commit,git命令下面会涉及到) 2. 安装Pelican 我的系统环境: OSX Python Git 10.11 2.7.10 2.3.8 使用pip安装Pelican和MarkDown pip install pelican pip install markdown 如果安装时报Permission denied,在命令前加sodu,运行时可能需要输入系统密码. 在磁盘上新建一个文件夹用来存放本地文件,比如我的文件夹叫Blog,然后运行: cd Blog pelican-quickstart 如果你跟我的环境一样的话 from six.moves.html_parser import HTMLParser 这句代码会报错,在six.moves里找不到html_parser.看来出了一些问题,处理之前我们先卸载Pelican pip uninstall pelican . 网上有一种处理方法是把这句代码改为 from HTMLParser import HTMLParser 实测可以解决. 我在网上找到另一种解释说是因为six的版本过低导致,使用 pip install -U six 可以fetch到新版本但是安装报错,加sudo都不让装,好像说是因为six这个组件比较核心.我找到的解决方法是到 这里 下载six的whl格式安装文件可以正常安装. 然后重新安装Pelican,在Blog下运行 pelican-quickstart ,它会问一些问题,按自己喜好回答或者在 这里 找答案,系统会按照答案生成一些配置,以后可以改所以怎么填都行,完成后会在目录下生成很多文件. 这就是Blog下的文件列表: 解释一下其中的部分内容(有些文件是后面加入的): content 存放md文件 develop_server.sh 控制本地网页服务器 Makefile 生成网站 output 存放生成的网站,之后这个文件夹会被同步到GitHub pelican-plugins 插件目录 pelican-themes 主题目录 pelicanconf.py 配置文件 publishconf.py 发布配置文件 tools 我自己加的,后面再讲 到这里安装就基本完成了. 3. 开始写博客 编写一个md文件,在最前边需要添加一些信息,下面是一个例子: Title : My super title #文章标题 * Date : 2010 - 12 - 03 10 : 20 #编写时间 * Modified : 2010 - 12 - 05 19 : 30 #修改时间 Category : Python #类别 * Tags : pelican , publishing #标签 * Slug : my - super - post #翻译不能 , 链接地址字符串 , 可以用来处理文章不同语言版本 Authors : Alexis Metaireau , Conan Doyle #作者 Summary : Short version for index and feeds #摘要 Hello world !...... 加*的是必填项 写完后放到content目录下,然后在Blog文件夹下执行 make html 生成网站.可以看到output目录下已经存放了生成好的文件. 然后继续运行 make devserver 开启网页服务,浏览器访问http://localhost:8000 即可看到生成的网页了,而且文件更改后还可以实时重新生成.用完以后记得 make stopserver 关闭服务. 4. 将网站部署到GitHub Pages 最后一步,将生成的网站部署到GitHub Pages,这一步需要使用一些Git命令,不熟悉的话请参考 这里 . 在终端里进入output目录,执行下列命令: git init #创建Git仓库 git add . #将output下的所有文件加入仓库 git remote add origin https://github.com/username/username.github.io #添加远程仓库,可能会要求输入Github用户名和密码 git pull origin master #将远程仓库中的文件获取回本地,之前已经都删除了,不会获取任何文件,不这样的话之后提交会冲突 git commit -m 'first update' #提交一个更改,命名为\"first update\" git push origin master #将本地更改同步到远程仓库的master分支 运行完成的话博客就上传到GitHub了,可以登陆username.github.io看一下,应该跟上一步最后看到的网页一样. 总结 到这里就把使用Pelican+GitHub Pages搭建个人博客的基本流程介绍完了.生成的博客应该类似于这样: 呃....好像也很丑的样子,而且也没啥功能. 下一篇我们继续定制这个博客,让它变得既美观又功能强大.","tags":"Python","title":"利用Pelican和GitHub Pages打造个性化博客(一)"},{"url":"http://blog.game18.net/zhu-xin-bo-ke-kai-zhang.html","text":"生命在于折腾! 不久前刚刚开始使用 Blogger ,为了替换一直使用的印象笔记.用了一段时间发现还是不爽,Blogger对MarkDown的支持并不是太好,也没什么好用的编辑器去配合,而且我费半天劲定制的Blogger界面丑得要死.终于,我下定决心再折腾一遍,搞一个更好用的博客. 上网搜一搜,什么博客比较高大上呢?知乎马上给你答案: GitHub Pages ,GitHub推出了支持静态网页的功能,就是GitHub Pages,程序员当然要用GitHub才算专业嘛.我们现在有md文件写博客内容,只要能把它们转成网页然后发布到GitHub Pages上就大功告成了.在GitHub Pages页面上推荐了 Jekyll 应该是最有名的静态博客网站转换工具.但Jekyll是基于Ruby的,我不懂也不想学,于是我选择了基于Python的 Pelican 来完成这项工作. 经过三天的研究, 新博客 终于上线了,本篇是随笔所以不写太多技术内容,下一篇详细写搭建流程吧. 最后,感谢神奈提供的域名,让博客的 B格 更加提高了一点(刚明明说用GitHub才叫专业).感谢 Talha Mansoor 开发的 Elegant 主题,试过了n多个主题以后,发现Elegant果然是当之无愧的 best-pelican-theme .我自己也研究了一下Pelican的主题开发,似乎难度并不高,以后有时间自己也弄一套吧.另外,感谢Pelican,感谢Python......","tags":"随笔","title":"祝!新博客开张!"}]}